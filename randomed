from typing import Tuple
import random

# Constants
NORTH = "n"
EAST = "e"
SOUTH = "s"
WEST = "w"
Yes = "y"
No = "n"
random1 = ([NORTH, EAST, SOUTH, WEST])
random2 = ([Yes,No])
STARTING_LOCATION = (1, 1)
FINAL_DESTINATION = (3, 1)
last = (0, 0)

def main():
    
    money= []
    initialize(random)
    location = STARTING_LOCATION
    while location != FINAL_DESTINATION:
        
        location = play_one_move(location, money)

    print(f"Victory! Total coins {sum(money)}.")
    play_again()

def initialize(random) -> None:
    while 1 != 0: 
        the_seed = input("Input seed: ")
        if the_seed.isdigit:
            random.seed(int(the_seed))
        else:
            the_seed = int(input("Input seed: "))
        return
def play_one_move(location: Tuple[int],money) -> Tuple[int]:
    """Plays one move of the game.
    Returns updated location.
    """
    
    valid_directions = find_directions(location)
    direction = get_direction(valid_directions)

    if direction in valid_directions:
        location = move(direction, location)
        coins(location, money)
    else:
        print("Not a valid direction!")

    return location


def find_directions(location: Tuple[int]) -> Tuple[str]:
    """Returns valid directions as a string given the supplied location."""
    
    if location == (1, 1):
        valid_directions = (NORTH,)
    elif location == (1, 2):
        valid_directions = NORTH, EAST, SOUTH
    elif location == (1, 3):
        valid_directions = EAST, SOUTH
    elif location == (2, 1):
        valid_directions = (NORTH,)
    elif location == (2, 2):
        valid_directions = SOUTH, WEST
    elif location == (2, 3):
        valid_directions = EAST, WEST
    elif location == (3, 2):
        valid_directions = NORTH, SOUTH
    elif location == (3, 3):
        valid_directions = SOUTH, WEST

    return valid_directions


def get_direction(valid_directions: Tuple[str]) -> str:
    print_directions(valid_directions)
    travel = random.choice(random1)
    print("Direction:", travel)
    return travel


def print_directions(available_directions: Tuple[str]) -> None:
    print("You can travel: ", end="")

    one_done_already = False
    for direction in available_directions:
        if one_done_already:
            print(" or ", end="")

        if direction == NORTH:
            print("(N)orth", end="")
        elif direction == EAST:
            print("(E)ast", end="")
        elif direction == SOUTH:
            print("(S)outh", end="")
        elif direction == WEST:
            print("(W)est", end="")

        one_done_already = True

    print(".")


def move(direction: str, location: Tuple[int]) -> Tuple[int]:
    """Returns updated location given the direction."""

    x, y = location

    if direction == NORTH:
        y += 1
    elif direction == SOUTH:
        y -= 1
    elif direction == EAST:
        x += 1
    elif direction == WEST:
        x -= 1

    return x, y


def coins(location, money):
    uno = 1
    if location != (1,2) and location != (2,2) and location != (2,3) and location != (3,2):
        return money
        
    wantto = random.choice(random2)
    print("Pull a lever (y/n):", wantto)
    if wantto == "y":
        money.append(uno)
        print(f"You received 1 coin, your total is now {sum(money)}.")
        
    else: 
        return money



def play_again():
    wantto = input("Play again (y/n): ")
    if wantto == "y":
        main()
    elif wantto == "n":
        pass

if __name__ == "__main__":
    main()

